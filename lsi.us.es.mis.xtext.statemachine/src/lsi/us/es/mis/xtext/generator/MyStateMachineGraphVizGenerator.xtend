/*
 * generated by Xtext 2.25.0
 */
package lsi.us.es.mis.xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import lsi.us.es.mis.xtext.myStateMachine.StateMachine

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyStateMachineGraphVizGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
         fsa.generateFile(resource.className + ".java",
                          toGraphViz(resource.contents.head as StateMachine))

	}
	
	def toGraphViz(StateMachine machine) {
		//	Generates a Graphviz graph for the state machine
		'''digraph G {
			node[fontname="Arial",style="filled",fillcolor="azure"]
			edge[fontname="Arial"]

			«FOR transition:machine.transitions»
				«transition.from.name» -> «transition.to.name»
			«ENDFOR»
	
		}
		'''
	}
	def className(Resource res){
      //No necesitamos especificar el tipo de las variables
      var name = res.URI.lastSegment //Cogemos el último segmento de la URI
      return name.substring(0, name.indexOf('.' )) //Devolvemos la parte que 
         // va justo antes del punto. Por ejemplo, si tenemos sample.wlrd, el   
         //resultado será sample.txt
  }
	
}
