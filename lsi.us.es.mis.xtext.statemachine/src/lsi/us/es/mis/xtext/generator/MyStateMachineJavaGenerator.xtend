/*
 * generated by Xtext 2.25.0
 */
package lsi.us.es.mis.xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import lsi.us.es.mis.xtext.myStateMachine.StateMachine
import lsi.us.es.mis.xtext.myStateMachine.State

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyStateMachineJavaGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
         fsa.generateFile(resource.className + ".java",
                          toJavaCode(resource.contents.head as StateMachine))
	}
	
	def toJavaCode(StateMachine machine) {
		'''
		public class App {
			
			public static void main(String[] args) {
				App app = new App();
				
				
				// The statement below will succeed
				app.process("AABC"); 
				
				// The statement below will fail because
				// there is no transition from A to C
				// in the state machine
				app.process("ACB"); 
			}
			
			«««Generate an entry process() method
			public void process(String str) {
				if (str.isEmpty()) return;
				«««For every state an if sentence in the process method should be generated
				«FOR state:machine.states»		
				if (str.charAt(0) == '«state.name»') {
					state«state.name»(str.substring(1));
					return;
				}
				«ENDFOR»	
				
				throw new IllegalStateException();
			}

				«FOR state:machine.states»		  
				
			public void state«state.name»(String str) {
				if (str.isEmpty()) return;
				
			««« for every outgoing transition of a state					
				«FOR transition:getOutgoingTransitions(machine, state)»
				if (str.charAt(0) == '«transition.to.name»') {
					state«transition.to.name»(str.substring(1));
					return;
				}
				«ENDFOR»
				throw new IllegalStateException();
			}
				«ENDFOR»	
		}
		'''
	}
	
	def getOutgoingTransitions(StateMachine machine, State state) {
		var res = newArrayList
		for (transition: machine.transitions){
			if (transition.to.equals(state))
				res.add(transition)
		}
		return res
	}
	
	def className(Resource res){
      //No necesitamos especificar el tipo de las variables
      var name = res.URI.lastSegment //Cogemos el último segmento de la URI
      return name.substring(0, name.indexOf('.' )) //Devolvemos la parte que 
         // va justo antes del punto. Por ejemplo, si tenemos sample.wlrd, el   
         //resultado será sample.txt
  }
	
}
